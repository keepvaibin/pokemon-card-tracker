
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  supertype: 'supertype',
  subtypes: 'subtypes',
  level: 'level',
  hp: 'hp',
  types: 'types',
  evolvesFrom: 'evolvesFrom',
  evolvesTo: 'evolvesTo',
  rules: 'rules',
  flavorText: 'flavorText',
  artist: 'artist',
  rarity: 'rarity',
  number: 'number',
  nationalPokedexNumbers: 'nationalPokedexNumbers',
  setId: 'setId',
  retreatCost: 'retreatCost',
  convertedRetreatCost: 'convertedRetreatCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AbilityScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  name: 'name',
  text: 'text',
  type: 'type'
};

exports.Prisma.AttackScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  name: 'name',
  cost: 'cost',
  convertedEnergyCost: 'convertedEnergyCost',
  damage: 'damage',
  text: 'text'
};

exports.Prisma.WeaknessScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  type: 'type',
  value: 'value'
};

exports.Prisma.ResistanceScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  type: 'type',
  value: 'value'
};

exports.Prisma.CardLegalitiesScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  unlimited: 'unlimited',
  standard: 'standard',
  expanded: 'expanded'
};

exports.Prisma.CardImagesScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  small: 'small',
  large: 'large'
};

exports.Prisma.CardMarketScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  url: 'url',
  updatedAt: 'updatedAt',
  averageSellPrice: 'averageSellPrice',
  lowPrice: 'lowPrice',
  trendPrice: 'trendPrice',
  germanProLow: 'germanProLow',
  suggestedPrice: 'suggestedPrice',
  reverseHoloSell: 'reverseHoloSell',
  reverseHoloLow: 'reverseHoloLow',
  reverseHoloTrend: 'reverseHoloTrend',
  lowPriceExPlus: 'lowPriceExPlus',
  avg1: 'avg1',
  avg7: 'avg7',
  avg30: 'avg30',
  reverseHoloAvg1: 'reverseHoloAvg1',
  reverseHoloAvg7: 'reverseHoloAvg7',
  reverseHoloAvg30: 'reverseHoloAvg30'
};

exports.Prisma.TcgPlayerPricesScalarFieldEnum = {
  id: 'id',
  normalLow: 'normalLow',
  normalMid: 'normalMid',
  normalHigh: 'normalHigh',
  normalMarket: 'normalMarket',
  normalDirectLow: 'normalDirectLow',
  holofoilLow: 'holofoilLow',
  holofoilMid: 'holofoilMid',
  holofoilHigh: 'holofoilHigh',
  holofoilMarket: 'holofoilMarket',
  holofoilDirectLow: 'holofoilDirectLow',
  reverseHolofoilLow: 'reverseHolofoilLow',
  reverseHolofoilMid: 'reverseHolofoilMid',
  reverseHolofoilHigh: 'reverseHolofoilHigh',
  reverseHolofoilMarket: 'reverseHolofoilMarket',
  reverseHolofoilDirectLow: 'reverseHolofoilDirectLow'
};

exports.Prisma.TcgPlayerScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  url: 'url',
  updatedAt: 'updatedAt',
  pricesId: 'pricesId'
};

exports.Prisma.CardSetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  series: 'series',
  printedTotal: 'printedTotal',
  total: 'total',
  ptcgoCode: 'ptcgoCode',
  releaseDate: 'releaseDate',
  updatedAt: 'updatedAt',
  symbol: 'symbol',
  logo: 'logo'
};

exports.Prisma.SetLegalitiesScalarFieldEnum = {
  id: 'id',
  setId: 'setId',
  unlimited: 'unlimited',
  standard: 'standard',
  expanded: 'expanded'
};

exports.Prisma.ImportMetadataScalarFieldEnum = {
  id: 'id',
  totalCount: 'totalCount',
  importedAt: 'importedAt',
  isFullImport: 'isFullImport'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Card: 'Card',
  Ability: 'Ability',
  Attack: 'Attack',
  Weakness: 'Weakness',
  Resistance: 'Resistance',
  CardLegalities: 'CardLegalities',
  CardImages: 'CardImages',
  CardMarket: 'CardMarket',
  TcgPlayerPrices: 'TcgPlayerPrices',
  TcgPlayer: 'TcgPlayer',
  CardSet: 'CardSet',
  SetLegalities: 'SetLegalities',
  ImportMetadata: 'ImportMetadata'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
